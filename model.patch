diff --git a/model.patch b/model.patch
index 900fded..e69de29 100644
--- a/model.patch
+++ b/model.patch
@@ -1,1673 +0,0 @@
-diff --git a/model.patch b/model.patch
-index c57e724..e69de29 100644
---- a/model.patch
-+++ b/model.patch
-@@ -1,1633 +0,0 @@
--diff --git a/model.patch b/model.patch
--index f82bc08..e69de29 100644
----- a/model.patch
--+++ b/model.patch
--@@ -1,1606 +0,0 @@
---diff --git a/model.patch b/model.patch
---index 76da2c3..e69de29 100644
------ a/model.patch
---+++ b/model.patch
---@@ -1,1563 +0,0 @@
----diff --git a/model.patch b/model.patch
----index 42be0e8..e69de29 100644
------- a/model.patch
----+++ b/model.patch
----@@ -1,1545 +0,0 @@
-----diff --git a/model.patch b/model.patch
-----index dbc2c7d..e69de29 100644
-------- a/model.patch
-----+++ b/model.patch
-----@@ -1,1304 +0,0 @@
------diff --git a/model.patch b/model.patch
------index 5049802..e69de29 100644
--------- a/model.patch
------+++ b/model.patch
------@@ -1,1287 +0,0 @@
-------diff --git a/model.patch b/model.patch
-------index 9b9aaf9..e69de29 100644
---------- a/model.patch
-------+++ b/model.patch
-------@@ -1,1282 +0,0 @@
--------diff --git a/backend/hr_routes.py b/backend/hr_routes.py
--------index aa5b901..84f4293 100644
----------- a/backend/hr_routes.py
--------+++ b/backend/hr_routes.py
--------@@ -98,7 +98,7 @@ async def get_employees(
--------         if department:
--------             query["department"] = department
--------         
---------        employees = list(employees_collection.find(query).skip(skip).limit(limit))
--------+        employees = await employees_collection.find(query).skip(skip).limit(limit).to_list(limit)
--------         for emp in employees:
--------             emp["id"] = str(emp["_id"])
--------             del emp["_id"]
--------@@ -246,7 +246,7 @@ async def get_time_entries(
--------                 "$lte": datetime.fromisoformat(end_date)
--------             }
--------         
---------        entries = list(time_entries_collection.find(query).sort("clock_in", -1).skip(skip).limit(limit))
--------+        entries = await time_entries_collection.find(query).sort("clock_in", -1).skip(skip).limit(limit).to_list(limit)
--------         for entry in entries:
--------             entry["id"] = str(entry["_id"])
--------             del entry["_id"]
--------@@ -338,7 +338,7 @@ async def get_pto_requests(
--------         if status:
--------             query["status"] = status
--------         
---------        requests = list(pto_requests_collection.find(query).sort("created_at", -1).skip(skip).limit(limit))
--------+        requests = await pto_requests_collection.find(query).sort("created_at", -1).skip(skip).limit(limit).to_list(limit)
--------         for req in requests:
--------             req["id"] = str(req["_id"])
--------             del req["_id"]
--------@@ -476,7 +476,7 @@ async def create_training(training: TrainingCreate):
-------- async def get_trainings():
--------     """Get all training programs"""
--------     try:
---------        trainings = list(trainings_collection.find())
--------+        trainings = await trainings_collection.find().to_list(1000)
--------         for training in trainings:
--------             training["id"] = str(training["_id"])
--------             del training["_id"]
--------@@ -520,7 +520,7 @@ async def get_employee_trainings(employee_id: Optional[str] = None, status: Opti
--------         if status:
--------             query["status"] = status
--------         
---------        trainings = list(employee_trainings_collection.find(query).sort("assigned_date", -1))
--------+        trainings = await employee_trainings_collection.find(query).sort("assigned_date", -1).to_list(1000)
--------         for training in trainings:
--------             training["id"] = str(training["_id"])
--------             del training["_id"]
--------@@ -600,7 +600,7 @@ async def get_performance_reviews(
--------         if status:
--------             query["status"] = status
--------         
---------        reviews = list(performance_reviews_collection.find(query).sort("scheduled_date", -1))
--------+        reviews = await performance_reviews_collection.find(query).sort("scheduled_date", -1).to_list(1000)
--------         for review in reviews:
--------             review["id"] = str(review["_id"])
--------             del review["_id"]
--------diff --git a/backend/integration_routes.py b/backend/integration_routes.py
--------index bf4896f..636a110 100644
----------- a/backend/integration_routes.py
--------+++ b/backend/integration_routes.py
--------@@ -59,7 +59,7 @@ async def get_integrations(integration_type: Optional[str] = None):
--------         if integration_type:
--------             query["integration_type"] = integration_type
--------         
---------        integrations = list(integrations_collection.find(query))
--------+        integrations = await integrations_collection.find(query).to_list(1000)
--------         for integration in integrations:
--------             integration["id"] = str(integration["_id"])
--------             del integration["_id"]
--------@@ -71,6 +71,32 @@ async def get_integrations(integration_type: Optional[str] = None):
--------     except Exception as e:
--------         raise HTTPException(status_code=500, detail=str(e))
-------- 
--------+@router.get("/sync-logs", response_model=dict)
--------+async def get_sync_logs(
--------+    integration_id: Optional[str] = None,
--------+    status: Optional[str] = None,
--------+    skip: int = 0,
--------+    limit: int = 50
--------+):
--------+    """Get sync logs"""
--------+    try:
--------+        query = {}
--------+        if integration_id:
--------+            query["integration_id"] = integration_id
--------+        if status:
--------+            query["status"] = status
--------+        
--------+        logs = await sync_logs_collection.find(query).sort("started_at", -1).skip(skip).limit(limit).to_list(limit)
--------+        for log in logs:
--------+            log["id"] = str(log["_id"])
--------+            del log["_id"]
--------+        
--------+        total = await sync_logs_collection.count_documents(query)
--------+        
--------+        return {"success": True, "logs": logs, "total": total}
--------+    except Exception as e:
--------+        raise HTTPException(status_code=500, detail=str(e))
--------+
-------- @router.get("/{integration_id}", response_model=dict)
-------- async def get_integration(integration_id: str):
--------     """Get integration by ID"""
--------@@ -490,29 +516,4 @@ async def sync_microsoft365_powerbi():
--------         raise HTTPException(status_code=500, detail=str(e))
-------- 
-------- # ==================== SYNC LOGS ====================
---------
---------@router.get("/sync-logs", response_model=dict)
---------async def get_sync_logs(
---------    integration_id: Optional[str] = None,
---------    status: Optional[str] = None,
---------    skip: int = 0,
---------    limit: int = 50
---------):
---------    """Get sync logs"""
---------    try:
---------        query = {}
---------        if integration_id:
---------            query["integration_id"] = integration_id
---------        if status:
---------            query["status"] = status
---------        
---------        logs = list(sync_logs_collection.find(query).sort("started_at", -1).skip(skip).limit(limit))
---------        for log in logs:
---------            log["id"] = str(log["_id"])
---------            del log["_id"]
---------        
---------        total = await sync_logs_collection.count_documents(query)
---------        
---------        return {"success": True, "logs": logs, "total": total}
---------    except Exception as e:
---------        raise HTTPException(status_code=500, detail=str(e))
--------+# Moved to before /{integration_id} route to avoid path conflicts
--------diff --git a/model.patch b/model.patch
--------index 821e439..addf098 100644
----------- a/model.patch
--------+++ b/model.patch
--------@@ -1,1142 +0,0 @@
---------diff --git a/backend/hr_routes.py b/backend/hr_routes.py
---------index e1c31f6..f7b7610 100644
------------ a/backend/hr_routes.py
---------+++ b/backend/hr_routes.py
---------@@ -43,7 +43,7 @@ employee_trainings_collection = db["employee_trainings"]
--------- performance_reviews_collection = db["performance_reviews"]
--------- payroll_settings_collection = db["payroll_settings"]
--------- 
----------router = APIRouter(prefix="/api/hr", tags=["HR Module"])
---------+router = APIRouter(prefix="/hr", tags=["HR Module"])
--------- 
--------- # ==================== EMPLOYEE MANAGEMENT ====================
--------- 
---------diff --git a/backend/integration_routes.py b/backend/integration_routes.py
---------index 87c00cf..52cc220 100644
------------ a/backend/integration_routes.py
---------+++ b/backend/integration_routes.py
---------@@ -31,7 +31,7 @@ db = client["snow_removal_db"]
--------- integrations_collection = db["integrations"]
--------- sync_logs_collection = db["sync_logs"]
--------- 
----------router = APIRouter(prefix="/api/integrations", tags=["Integration Hub"])
---------+router = APIRouter(prefix="/integrations", tags=["Integration Hub"])
--------- 
--------- # ==================== INTEGRATION MANAGEMENT ====================
--------- 
---------diff --git a/model.patch b/model.patch
---------index 971a945..e69de29 100644
------------ a/model.patch
---------+++ b/model.patch
---------@@ -1,975 +0,0 @@
----------diff --git a/site_maps_test.py b/site_maps_test.py
----------new file mode 100644
----------index 0000000..11516d1
------------- /dev/null
----------+++ b/site_maps_test.py
----------@@ -0,0 +1,840 @@
----------+#!/usr/bin/env python3
----------+"""
----------+Site Maps Backend Testing Suite
----------+Tests the newly implemented Site Maps annotation feature endpoints.
----------+"""
----------+
----------+import asyncio
----------+import aiohttp
----------+import json
----------+from datetime import datetime, timedelta
----------+from typing import Dict, List, Any
----------+import sys
----------+import traceback
----------+
----------+# Backend URL from frontend environment
----------+BACKEND_URL = "https://ui-unifier.preview.emergentagent.com/api"
----------+
----------+class SiteMapsTestSuite:
----------+    def __init__(self):
----------+        self.session = None
----------+        self.test_results = []
----------+        self.total_tests = 0
----------+        self.passed_tests = 0
----------+        self.test_site_id = None
----------+        self.test_customer_id = None
----------+        self.created_map_ids = []
----------+        
----------+    async def setup_session(self):
----------+        """Setup HTTP session for testing"""
----------+        self.session = aiohttp.ClientSession(
----------+            timeout=aiohttp.ClientTimeout(total=30),
----------+            headers={'Content-Type': 'application/json'}
----------+        )
----------+        
----------+    async def cleanup_session(self):
----------+        """Cleanup HTTP session"""
----------+        if self.session:
----------+            await self.session.close()
----------+            
----------+    def log_test(self, test_name: str, success: bool, details: str = "", response_data: Any = None):
----------+        """Log test result"""
----------+        self.total_tests += 1
----------+        if success:
----------+            self.passed_tests += 1
----------+            
----------+        result = {
----------+            "test": test_name,
----------+            "success": success,
----------+            "details": details,
----------+            "response_data": response_data
----------+        }
----------+        self.test_results.append(result)
----------+        
----------+        status = "✅ PASS" if success else "❌ FAIL"
----------+        print(f"{status}: {test_name}")
----------+        if details:
----------+            print(f"   Details: {details}")
----------+        if not success and response_data:
----------+            print(f"   Response: {response_data}")
----------+        print()
----------+        
----------+    async def make_request(self, method: str, endpoint: str, data: Dict = None, params: Dict = None) -> tuple:
----------+        """Make HTTP request and return (success, response_data, status_code)"""
----------+        try:
----------+            url = f"{BACKEND_URL}{endpoint}"
----------+            
----------+            if method.upper() == "GET":
----------+                async with self.session.get(url, params=params) as response:
----------+                    response_data = await response.json()
----------+                    return response.status < 400, response_data, response.status
----------+            elif method.upper() == "POST":
----------+                async with self.session.post(url, json=data, params=params) as response:
----------+                    response_data = await response.json()
----------+                    return response.status < 400, response_data, response.status
----------+            elif method.upper() == "PUT":
----------+                async with self.session.put(url, json=data, params=params) as response:
----------+                    response_data = await response.json()
----------+                    return response.status < 400, response_data, response.status
----------+            elif method.upper() == "DELETE":
----------+                async with self.session.delete(url, params=params) as response:
----------+                    response_data = await response.json()
----------+                    return response.status < 400, response_data, response.status
----------+                    
----------+        except Exception as e:
----------+            return False, {"error": str(e)}, 500
----------+            
----------+    async def setup_test_data(self):
----------+        """Create test customer and site for testing"""
----------+        print("🔧 Setting up test data (customer and site)...")
----------+        
----------+        # Create test customer
----------+        customer_data = {
----------+            "name": "Site Maps Test Customer",
----------+            "email": "sitemaps.test@example.com",
----------+            "phone": "+1234567890",
----------+            "address": "123 Test Street, Test City, TC 12345",
----------+            "customer_type": "commercial"
----------+        }
----------+        
----------+        success, response, status = await self.make_request("POST", "/customers", customer_data)
----------+        if success and "id" in response:
----------+            self.test_customer_id = response["id"]
----------+            print(f"   ✅ Created test customer: {self.test_customer_id}")
----------+        else:
----------+            print(f"   ❌ Failed to create test customer: {response}")
----------+            return False
----------+            
----------+        # Create test site
----------+        site_data = {
----------+            "customer_id": self.test_customer_id,
----------+            "name": "Test Site for Maps",
----------+            "location": {
----------+                "latitude": 43.6532,
----------+                "longitude": -79.3832,
----------+                "address": "456 Site Avenue, Test City, TC 12345"
----------+            },
----------+            "site_type": "commercial"
----------+        }
----------+        
----------+        success, response, status = await self.make_request("POST", "/sites", site_data)
----------+        if success and "id" in response:
----------+            self.test_site_id = response["id"]
----------+            print(f"   ✅ Created test site: {self.test_site_id}")
----------+            return True
----------+        else:
----------+            print(f"   ❌ Failed to create test site: {response}")
----------+            return False
----------+            
----------+    async def cleanup_test_data(self):
----------+        """Clean up test data"""
----------+        print("🧹 Cleaning up test data...")
----------+        
----------+        # Delete created site maps
----------+        for map_id in self.created_map_ids:
----------+            try:
----------+                await self.make_request("DELETE", f"/site-maps/{map_id}")
----------+                print(f"   ✅ Deleted site map: {map_id}")
----------+            except:
----------+                pass
----------+                
----------+        # Delete test site
----------+        if self.test_site_id:
----------+            try:
----------+                await self.make_request("DELETE", f"/sites/{self.test_site_id}")
----------+                print(f"   ✅ Deleted test site: {self.test_site_id}")
----------+            except:
----------+                pass
----------+                
----------+        # Delete test customer
----------+        if self.test_customer_id:
----------+            try:
----------+                await self.make_request("DELETE", f"/customers/{self.test_customer_id}")
----------+                print(f"   ✅ Deleted test customer: {self.test_customer_id}")
----------+            except:
----------+                pass
----------+                
----------+    async def test_create_site_map(self):
----------+        """Test POST /api/site-maps - Create a new site map with annotations"""
----------+        print("📍 Testing Create Site Map Endpoint...")
----------+        
----------+        # Test 1: Create site map with basic annotations
----------+        site_map_data = {
----------+            "site_id": self.test_site_id,
----------+            "name": "Winter 2024 Layout",
----------+            "base_map_type": "google_maps",
----------+            "base_map_url": "123 Test Street, Test City",
----------+            "annotations": [
----------+                {
----------+                    "id": "ann_001",
----------+                    "type": "icon",
----------+                    "category": "fire_hydrant",
----------+                    "label": "Fire Hydrant #1",
----------+                    "color": "#FF0000",
----------+                    "coordinates": [{"x": 100, "y": 150}],
----------+                    "properties": {"icon_type": "fire_hydrant"}
----------+                },
----------+                {
----------+                    "id": "ann_002", 
----------+                    "type": "rectangle",
----------+                    "category": "plowing_zone",
----------+                    "label": "Main Parking Area",
----------+                    "color": "#00FF00",
----------+                    "coordinates": [{"x": 50, "y": 50}, {"x": 200, "y": 150}],
----------+                    "properties": {"fill": True, "stroke_width": 2}
----------+                },
----------+                {
----------+                    "id": "ann_003",
----------+                    "type": "line",
----------+                    "category": "sidewalk",
----------+                    "label": "Main Walkway",
----------+                    "color": "#0000FF",
----------+                    "coordinates": [{"x": 0, "y": 200}, {"x": 250, "y": 200}],
----------+                    "properties": {"stroke_width": 3}
----------+                }
----------+            ],
----------+            "legend_items": [
----------+                {"category": "fire_hydrant", "label": "Fire Hydrants", "color": "#FF0000", "icon": "fire"},
----------+                {"category": "plowing_zone", "label": "Plowing Zones", "color": "#00FF00", "icon": "rectangle"},
----------+                {"category": "sidewalk", "label": "Sidewalks", "color": "#0000FF", "icon": "line"}
----------+            ],
----------+            "created_by": "test_user"
----------+        }
----------+        
----------+        success, response, status = await self.make_request("POST", "/site-maps", site_map_data)
----------+        
----------+        if success and "id" in response:
----------+            map_id = response["id"]
----------+            self.created_map_ids.append(map_id)
----------+            
----------+            # Validate response structure
----------+            required_fields = ["id", "site_id", "version", "name", "base_map_type", "annotations", "is_current", "created_at"]
----------+            missing_fields = [field for field in required_fields if field not in response]
----------+            
----------+            if not missing_fields:
----------+                self.log_test(
----------+                    "Create site map with annotations",
----------+                    True,
----------+                    f"Created map ID: {map_id}, Version: {response.get('version')}, Annotations: {len(response.get('annotations', []))}"
----------+                )
----------+                
----------+                # Validate version number (should be 1 for first map)
----------+                version_correct = response.get("version") == 1
----------+                self.log_test(
----------+                    "Version number assignment (first map)",
----------+                    version_correct,
----------+                    f"Expected version 1, got {response.get('version')}"
----------+                )
----------+                
----------+                # Validate is_current flag (should be True for new map)
----------+                is_current_correct = response.get("is_current") == True
----------+                self.log_test(
----------+                    "Current flag assignment (new map)",
----------+                    is_current_correct,
----------+                    f"Expected is_current=True, got {response.get('is_current')}"
----------+                )
----------+                
----------+                # Validate annotations preservation
----------+                annotations_preserved = len(response.get("annotations", [])) == 3
----------+                self.log_test(
----------+                    "Annotations preservation",
----------+                    annotations_preserved,
----------+                    f"Expected 3 annotations, got {len(response.get('annotations', []))}"
----------+                )
----------+                
----------+            else:
----------+                self.log_test(
----------+                    "Create site map response structure",
----------+                    False,
----------+                    f"Missing fields: {missing_fields}",
----------+                    response
----------+                )
----------+        else:
----------+            self.log_test(
----------+                "Create site map with annotations",
----------+                False,
----------+                f"Failed to create site map, Status: {status}",
----------+                response
----------+            )
----------+            
----------+        # Test 2: Create second version of site map
----------+        site_map_data_v2 = {
----------+            "site_id": self.test_site_id,
----------+            "name": "Updated Winter Layout",
----------+            "base_map_type": "google_maps",
----------+            "base_map_url": "123 Test Street, Test City",
----------+            "annotations": [
----------+                {
----------+                    "id": "ann_004",
----------+                    "type": "circle",
----------+                    "category": "drain",
----------+                    "label": "Storm Drain",
----------+                    "color": "#FFFF00",
----------+                    "coordinates": [{"x": 75, "y": 75}],
----------+                    "properties": {"radius": 10}
----------+                }
----------+            ],
----------+            "created_by": "test_user"
----------+        }
----------+        
----------+        success, response, status = await self.make_request("POST", "/site-maps", site_map_data_v2)
----------+        
----------+        if success and "id" in response:
----------+            map_id_v2 = response["id"]
----------+            self.created_map_ids.append(map_id_v2)
----------+            
----------+            # Validate version increment
----------+            version_correct = response.get("version") == 2
----------+            self.log_test(
----------+                "Version number increment (second map)",
----------+                version_correct,
----------+                f"Expected version 2, got {response.get('version')}"
----------+            )
----------+            
----------+            # Validate new map is current
----------+            is_current_correct = response.get("is_current") == True
----------+            self.log_test(
----------+                "Current flag for new version",
----------+                is_current_correct,
----------+                f"New version should be current: {response.get('is_current')}"
----------+            )
----------+        else:
----------+            self.log_test(
----------+                "Create second version of site map",
----------+                False,
----------+                f"Failed to create second version, Status: {status}",
----------+                response
----------+            )
----------+            
----------+        # Test 3: Create site map with invalid site_id
----------+        invalid_site_map = {
----------+            "site_id": "invalid_site_id_12345",
----------+            "name": "Invalid Site Map",
----------+            "base_map_type": "google_maps"
----------+        }
----------+        
----------+        success, response, status = await self.make_request("POST", "/site-maps", invalid_site_map)
----------+        
----------+        # Should fail with 404 or 400
----------+        expected_failure = status >= 400
----------+        self.log_test(
----------+            "Create site map with invalid site_id",
----------+            expected_failure,
----------+            f"Expected error status, got {status}: {response.get('detail', 'No error message')}"
----------+        )
----------+        
----------+    async def test_get_site_maps_by_site(self):
----------+        """Test GET /api/site-maps/site/{site_id} - Get all site maps for a specific site"""
----------+        print("📋 Testing Get Site Maps by Site Endpoint...")
----------+        
----------+        # Test 1: Get all site maps for the test site
----------+        success, response, status = await self.make_request("GET", f"/site-maps/site/{self.test_site_id}")
----------+        
----------+        if success and isinstance(response, list):
----------+            self.log_test(
----------+                "Get all site maps for site",
----------+                True,
----------+                f"Retrieved {len(response)} site maps, Status: {status}"
----------+            )
----------+            
----------+            # Validate maps are sorted by version (descending)
----------+            if len(response) > 1:
----------+                versions = [map_data.get("version", 0) for map_data in response]
----------+                is_sorted = all(versions[i] >= versions[i+1] for i in range(len(versions)-1))
----------+                self.log_test(
----------+                    "Site maps sorting by version",
----------+                    is_sorted,
----------+                    f"Versions: {versions}, Sorted descending: {is_sorted}"
----------+                )
----------+                
----------+            # Validate only one map is marked as current
----------+            current_maps = [map_data for map_data in response if map_data.get("is_current")]
----------+            only_one_current = len(current_maps) == 1
----------+            self.log_test(
----------+                "Only one current map per site",
----------+                only_one_current,
----------+                f"Found {len(current_maps)} current maps (should be 1)"
----------+            )
----------+            
----------+        else:
----------+            self.log_test(
----------+                "Get all site maps for site",
----------+                False,
----------+                f"Failed to get site maps, Status: {status}",
----------+                response
----------+            )
----------+            
----------+        # Test 2: Get only current site map
----------+        success, response, status = await self.make_request(
----------+            "GET", 
----------+            f"/site-maps/site/{self.test_site_id}",
----------+            params={"current_only": "true"}
----------+        )
----------+        
----------+        if success and isinstance(response, list):
----------+            current_only_correct = len(response) <= 1
----------+            self.log_test(
----------+                "Get current site map only",
----------+                current_only_correct,
----------+                f"Retrieved {len(response)} maps with current_only=True (should be 0 or 1)"
----------+            )
----------+            
----------+            # If there's a current map, validate it's marked as current
----------+            if response:
----------+                is_current = response[0].get("is_current")
----------+                self.log_test(
----------+                    "Current map flag validation",
----------+                    is_current == True,
----------+                    f"Current map is_current flag: {is_current}"
----------+                )
----------+        else:
----------+            self.log_test(
----------+                "Get current site map only",
----------+                False,
----------+                f"Failed to get current site map, Status: {status}",
----------+                response
----------+            )
----------+            
----------+        # Test 3: Get site maps for non-existent site
----------+        success, response, status = await self.make_request("GET", "/site-maps/site/nonexistent_site_id")
----------+        
----------+        # Should return empty list, not error
----------+        empty_result = success and isinstance(response, list) and len(response) == 0
----------+        self.log_test(
----------+            "Get site maps for non-existent site",
----------+            empty_result,
----------+            f"Expected empty list, got: {len(response) if isinstance(response, list) else 'not a list'}"
----------+        )
----------+        
----------+    async def test_get_specific_site_map(self):
----------+        """Test GET /api/site-maps/{map_id} - Get a specific site map by ID"""
----------+        print("🔍 Testing Get Specific Site Map Endpoint...")
----------+        
----------+        if not self.created_map_ids:
----------+            self.log_test(
----------+                "Get specific site map (no test data)",
----------+                False,
----------+                "No site maps created in previous tests"
----------+            )
----------+            return
----------+            
----------+        # Test 1: Get existing site map
----------+        map_id = self.created_map_ids[0]
----------+        success, response, status = await self.make_request("GET", f"/site-maps/{map_id}")
----------+        
----------+        if success and "id" in response:
----------+            self.log_test(
----------+                "Get specific site map by ID",
----------+                True,
----------+                f"Retrieved map ID: {response.get('id')}, Name: {response.get('name')}"
----------+            )
----------+            
----------+            # Validate response structure
----------+            required_fields = ["id", "site_id", "version", "name", "annotations", "is_current"]
----------+            missing_fields = [field for field in required_fields if field not in response]
----------+            
----------+            self.log_test(
----------+                "Specific site map response structure",
----------+                len(missing_fields) == 0,
----------+                f"Missing fields: {missing_fields}" if missing_fields else "All required fields present"
----------+            )
----------+            
----------+            # Validate annotations structure
----------+            annotations = response.get("annotations", [])
----------+            if annotations:
----------+                sample_annotation = annotations[0]
----------+                annotation_fields = ["id", "type", "coordinates"]
----------+                missing_ann_fields = [field for field in annotation_fields if field not in sample_annotation]
----------+                
----------+                self.log_test(
----------+                    "Annotation structure validation",
----------+                    len(missing_ann_fields) == 0,
----------+                    f"Annotation missing fields: {missing_ann_fields}" if missing_ann_fields else "Annotation structure valid"
----------+                )
----------+        else:
----------+            self.log_test(
----------+                "Get specific site map by ID",
----------+                False,
----------+                f"Failed to get site map, Status: {status}",
----------+                response
----------+            )
----------+            
----------+        # Test 2: Get non-existent site map
----------+        success, response, status = await self.make_request("GET", "/site-maps/nonexistent_map_id")
----------+        
----------+        # Should return 404
----------+        expected_error = status == 404
----------+        self.log_test(
----------+            "Get non-existent site map",
----------+            expected_error,
----------+            f"Expected 404, got {status}: {response.get('detail', 'No error message')}"
----------+        )
----------+        
----------+    async def test_update_site_map(self):
----------+        """Test PUT /api/site-maps/{map_id} - Update a site map"""
----------+        print("✏️ Testing Update Site Map Endpoint...")
----------+        
----------+        if not self.created_map_ids:
----------+            self.log_test(
----------+                "Update site map (no test data)",
----------+                False,
----------+                "No site maps created in previous tests"
----------+            )
----------+            return
----------+            
----------+        # Test 1: Update site map name and annotations
----------+        map_id = self.created_map_ids[0]
----------+        update_data = {
----------+            "name": "Updated Winter Layout - Modified",
----------+            "annotations": [
----------+                {
----------+                    "id": "ann_updated_001",
----------+                    "type": "icon",
----------+                    "category": "entrance",
----------+                    "label": "Main Entrance",
----------+                    "color": "#FF00FF",
----------+                    "coordinates": [{"x": 125, "y": 175}],
----------+                    "properties": {"icon_type": "entrance"}
----------+                },
----------+                {
----------+                    "id": "ann_updated_002",
----------+                    "type": "polygon",
----------+                    "category": "custom",
----------+                    "label": "Special Zone",
----------+                    "color": "#00FFFF",
----------+                    "coordinates": [
----------+                        {"x": 10, "y": 10},
----------+                        {"x": 50, "y": 10},
----------+                        {"x": 50, "y": 50},
----------+                        {"x": 10, "y": 50}
----------+                    ],
----------+                    "properties": {"fill": True}
----------+                }
----------+            ]
----------+        }
----------+        
----------+        success, response, status = await self.make_request("PUT", f"/site-maps/{map_id}", update_data)
----------+        
----------+        if success and "id" in response:
----------+            self.log_test(
----------+                "Update site map name and annotations",
----------+                True,
----------+                f"Updated map ID: {response.get('id')}, New name: {response.get('name')}"
----------+            )
----------+            
----------+            # Validate name was updated
----------+            name_updated = response.get("name") == "Updated Winter Layout - Modified"
----------+            self.log_test(
----------+                "Site map name update",
----------+                name_updated,
----------+                f"Expected 'Updated Winter Layout - Modified', got '{response.get('name')}'"
----------+            )
----------+            
----------+            # Validate annotations were updated
----------+            annotations_updated = len(response.get("annotations", [])) == 2
----------+            self.log_test(
----------+                "Site map annotations update",
----------+                annotations_updated,
----------+                f"Expected 2 annotations, got {len(response.get('annotations', []))}"
----------+            )
----------+            
----------+            # Validate updated_at timestamp was changed
----------+            has_updated_at = "updated_at" in response
----------+            self.log_test(
----------+                "Updated timestamp presence",
----------+                has_updated_at,
----------+                f"updated_at field present: {has_updated_at}"
----------+            )
----------+            
----------+        else:
----------+            self.log_test(
----------+                "Update site map name and annotations",
----------+                False,
----------+                f"Failed to update site map, Status: {status}",
----------+                response
----------+            )
----------+            
----------+        # Test 2: Update with empty data (should fail)
----------+        success, response, status = await self.make_request("PUT", f"/site-maps/{map_id}", {})
----------+        
----------+        # Should return 400 error for no data
----------+        expected_error = status == 400
----------+        self.log_test(
----------+            "Update site map with empty data",
----------+            expected_error,
----------+            f"Expected 400 error, got {status}: {response.get('detail', 'No error message')}"
----------+        )
----------+        
----------+        # Test 3: Update non-existent site map
----------+        success, response, status = await self.make_request(
----------+            "PUT", 
----------+            "/site-maps/nonexistent_map_id",
----------+            {"name": "Should Fail"}
----------+        )
----------+        
----------+        # Should return 404
----------+        expected_error = status == 404
----------+        self.log_test(
----------+            "Update non-existent site map",
----------+            expected_error,
----------+            f"Expected 404, got {status}: {response.get('detail', 'No error message')}"
----------+        )
----------+        
----------+    async def test_set_current_site_map(self):
----------+        """Test POST /api/site-maps/{map_id}/set-current - Set a specific map version as current"""
----------+        print("🎯 Testing Set Current Site Map Endpoint...")
----------+        
----------+        if len(self.created_map_ids) < 2:
----------+            self.log_test(
----------+                "Set current site map (insufficient test data)",
----------+                False,
----------+                "Need at least 2 site maps for this test"
----------+            )
----------+            return
----------+            
----------+        # Test 1: Set first map as current (should change from second map)
----------+        first_map_id = self.created_map_ids[0]
----------+        success, response, status = await self.make_request("POST", f"/site-maps/{first_map_id}/set-current")
----------+        
----------+        if success:
----------+            self.log_test(
----------+                "Set first map as current",
----------+                True,
----------+                f"Successfully set map {first_map_id} as current, Status: {status}"
----------+            )
----------+            
----------+            # Verify the change by getting all maps for the site
----------+            success_verify, maps_response, _ = await self.make_request("GET", f"/site-maps/site/{self.test_site_id}")
----------+            
----------+            if success_verify and isinstance(maps_response, list):
----------+                # Find which map is current
----------+                current_maps = [m for m in maps_response if m.get("is_current")]
----------+                current_map_id = current_maps[0].get("id") if current_maps else None
----------+                
----------+                current_correct = current_map_id == first_map_id
----------+                self.log_test(
----------+                    "Verify current map change",
----------+                    current_correct,
----------+                    f"Expected current map: {first_map_id}, actual: {current_map_id}"
----------+                )
----------+                
----------+                # Verify only one map is current
----------+                only_one_current = len(current_maps) == 1
----------+                self.log_test(
----------+                    "Only one current map after change",
----------+                    only_one_current,
----------+                    f"Found {len(current_maps)} current maps (should be 1)"
----------+                )
----------+        else:
----------+            self.log_test(
----------+                "Set first map as current",
----------+                False,
----------+                f"Failed to set current map, Status: {status}",
----------+                response
----------+            )
----------+            
----------+        # Test 2: Set second map as current
----------+        second_map_id = self.created_map_ids[1]
----------+        success, response, status = await self.make_request("POST", f"/site-maps/{second_map_id}/set-current")
----------+        
----------+        self.log_test(
----------+            "Set second map as current",
----------+            success,
----------+            f"Set map {second_map_id} as current, Status: {status}"
----------+        )
----------+        
----------+        # Test 3: Set non-existent map as current
----------+        success, response, status = await self.make_request("POST", "/site-maps/nonexistent_map_id/set-current")
----------+        
----------+        # Should return 404
----------+        expected_error = status == 404
----------+        self.log_test(
----------+            "Set non-existent map as current",
----------+            expected_error,
----------+            f"Expected 404, got {status}: {response.get('detail', 'No error message')}"
----------+        )
----------+        
----------+    async def test_delete_site_map(self):
----------+        """Test DELETE /api/site-maps/{map_id} - Delete a site map"""
----------+        print("🗑️ Testing Delete Site Map Endpoint...")
----------+        
----------+        if not self.created_map_ids:
----------+            self.log_test(
----------+                "Delete site map (no test data)",
----------+                False,
----------+                "No site maps created in previous tests"
----------+            )
----------+            return
----------+            
----------+        # Test 1: Delete existing site map
----------+        map_to_delete = self.created_map_ids[-1]  # Delete the last one
----------+        success, response, status = await self.make_request("DELETE", f"/site-maps/{map_to_delete}")
----------+        
----------+        if success:
----------+            self.log_test(
----------+                "Delete existing site map",
----------+                True,
----------+                f"Successfully deleted map {map_to_delete}, Status: {status}"
----------+            )
----------+            
----------+            # Remove from our tracking list
----------+            self.created_map_ids.remove(map_to_delete)
----------+            
----------+            # Verify deletion by trying to get the deleted map
----------+            success_verify, verify_response, verify_status = await self.make_request("GET", f"/site-maps/{map_to_delete}")
----------+            
----------+            deletion_verified = verify_status == 404
----------+            self.log_test(
----------+                "Verify site map deletion",
----------+                deletion_verified,
----------+                f"Deleted map should return 404, got {verify_status}"
----------+            )
----------+        else:
----------+            self.log_test(
----------+                "Delete existing site map",
----------+                False,
----------+                f"Failed to delete site map, Status: {status}",
----------+                response
----------+            )
----------+            
----------+        # Test 2: Delete non-existent site map
----------+        success, response, status = await self.make_request("DELETE", "/site-maps/nonexistent_map_id")
----------+        
----------+        # Should return 404
----------+        expected_error = status == 404
----------+        self.log_test(
----------+            "Delete non-existent site map",
----------+            expected_error,
----------+            f"Expected 404, got {status}: {response.get('detail', 'No error message')}"
----------+        )
----------+        
----------+    async def test_error_handling_and_edge_cases(self):
----------+        """Test error handling and edge cases"""
----------+        print("🚨 Testing Error Handling and Edge Cases...")
----------+        
----------+        # Test 1: Create site map with malformed annotations
----------+        malformed_site_map = {
----------+            "site_id": self.test_site_id,
----------+            "name": "Malformed Annotations Test",
----------+            "base_map_type": "google_maps",
----------+            "annotations": [
----------+                {
----------+                    "id": "bad_ann_001",
----------+                    "type": "invalid_type",
----------+                    # Missing required coordinates
----------+                    "color": "#FF0000"
----------+                }
----------+            ]
----------+        }
----------+        
----------+        success, response, status = await self.make_request("POST", "/site-maps", malformed_site_map)
----------+        
----------+        # Should handle gracefully (either accept or reject with proper error)
----------+        handled_gracefully = status < 500  # Should not crash the server
----------+        self.log_test(
----------+            "Handle malformed annotations",
----------+            handled_gracefully,
----------+            f"Server handled malformed data gracefully, Status: {status}"
----------+        )
----------+        
----------+        # Test 2: Create site map with very large annotation data
----------+        large_annotation_data = {
----------+            "site_id": self.test_site_id,
----------+            "name": "Large Annotation Test",
----------+            "base_map_type": "google_maps",
----------+            "annotations": [
----------+                {
----------+                    "id": f"large_ann_{i}",
----------+                    "type": "circle",
----------+                    "coordinates": [{"x": i * 10, "y": i * 10}],
----------+                    "properties": {"description": "A" * 1000}  # Large description
----------+                } for i in range(100)  # 100 annotations
----------+            ]
----------+        }
----------+        
----------+        success, response, status = await self.make_request("POST", "/site-maps", large_annotation_data)
----------+        
----------+        # Should handle large data gracefully
----------+        handled_large_data = status < 500
----------+        self.log_test(
----------+            "Handle large annotation dataset",
----------+            handled_large_data,
----------+            f"Server handled large dataset, Status: {status}, Success: {success}"
----------+        )
----------+        
----------+        if success and "id" in response:
----------+            self.created_map_ids.append(response["id"])
----------+            
----------+        # Test 3: Get site maps with invalid site ID format
----------+        success, response, status = await self.make_request("GET", "/site-maps/site/invalid-id-format-!@#$%")
----------+        
----------+        # Should return empty list or proper error, not crash
----------+        handled_invalid_id = status < 500
----------+        self.log_test(
----------+            "Handle invalid site ID format",
----------+            handled_invalid_id,
----------+            f"Server handled invalid ID format, Status: {status}"
----------+        )
----------+        
----------+    async def run_all_tests(self):
----------+        """Run all site maps tests"""
----------+        print("🚀 Starting Site Maps Backend Testing Suite")
----------+        print("=" * 60)
----------+        
----------+        await self.setup_session()
----------+        
----------+        try:
----------+            # Setup test data
----------+            setup_success = await self.setup_test_data()
----------+            if not setup_success:
----------+                print("❌ Failed to setup test data. Aborting tests.")
----------+                return 0, 1
----------+                
----------+            # Run all test suites
----------+            await self.test_create_site_map()
----------+            await self.test_get_site_maps_by_site()
----------+            await self.test_get_specific_site_map()
----------+            await self.test_update_site_map()
----------+            await self.test_set_current_site_map()
----------+            await self.test_delete_site_map()
----------+            await self.test_error_handling_and_edge_cases()
----------+            
----------+        except Exception as e:
----------+            print(f"❌ Test suite error: {str(e)}")
----------+            traceback.print_exc()
----------+        finally:
----------+            # Cleanup test data
----------+            await self.cleanup_test_data()
----------+            await self.cleanup_session()
----------+            
----------+        # Print summary
----------+        print("=" * 60)
----------+        print("📊 TEST SUMMARY")
----------+        print("=" * 60)
----------+        print(f"Total Tests: {self.total_tests}")
----------+        print(f"Passed: {self.passed_tests}")
----------+        print(f"Failed: {self.total_tests - self.passed_tests}")
----------+        print(f"Success Rate: {(self.passed_tests / self.total_tests * 100):.1f}%" if self.total_tests > 0 else "0%")
----------+        
----------+        if self.total_tests - self.passed_tests > 0:
----------+            print("\n❌ FAILED TESTS:")
----------+            for result in self.test_results:
----------+                if not result["success"]:
----------+                    print(f"   - {result['test']}: {result['details']}")
----------+        
----------+        print("\n✅ SITE MAPS TESTING COMPLETED")
----------+        return self.passed_tests, self.total_tests
----------+
----------+async def main():
----------+    """Main test runner"""
----------+    test_suite = SiteMapsTestSuite()
----------+    passed, total = await test_suite.run_all_tests()
----------+    
----------+    # Exit with appropriate code
----------+    if passed == total:
----------+        sys.exit(0)  # All tests passed
----------+    else:
----------+        sys.exit(1)  # Some tests failed
----------+
----------+if __name__ == "__main__":
----------+    asyncio.run(main())
----------\ No newline at end of file
----------diff --git a/test_result.md b/test_result.md
----------new file mode 100644
----------index 0000000..c2e1c62
------------- /dev/null
----------+++ b/test_result.md
----------@@ -0,0 +1,121 @@
----------+---
----------+backend:
----------+  - task: "Site Maps API - Create site map with annotations"
----------+    implemented: true
----------+    working: true
----------+    file: "/app/backend/server.py"
----------+    stuck_count: 0
----------+    priority: "high"
----------+    needs_retesting: false
----------+    status_history:
----------+      - working: true
----------+        agent: "testing"
----------+        comment: "✅ POST /api/site-maps endpoint working correctly. Successfully creates site maps with annotations, auto-increments version numbers, and sets current flag properly."
----------+
----------+  - task: "Site Maps API - Get site maps by site"
----------+    implemented: true
----------+    working: true
----------+    file: "/app/backend/server.py"
----------+    stuck_count: 0
----------+    priority: "high"
----------+    needs_retesting: false
----------+    status_history:
----------+      - working: true
----------+        agent: "testing"
----------+        comment: "✅ GET /api/site-maps/site/{site_id} endpoint working correctly. Supports current_only parameter, proper sorting by version, and maintains only one current map per site."
----------+
----------+  - task: "Site Maps API - Get specific site map"
----------+    implemented: true
----------+    working: true
----------+    file: "/app/backend/server.py"
----------+    stuck_count: 0
----------+    priority: "high"
----------+    needs_retesting: false
----------+    status_history:
----------+      - working: true
----------+        agent: "testing"
----------+        comment: "✅ GET /api/site-maps/{map_id} endpoint working correctly. Returns proper site map structure with annotations."
----------+
----------+  - task: "Site Maps API - Update site map"
----------+    implemented: true
----------+    working: true
----------+    file: "/app/backend/server.py"
----------+    stuck_count: 0
----------+    priority: "high"
----------+    needs_retesting: false
----------+    status_history:
----------+      - working: true
----------+        agent: "testing"
----------+        comment: "✅ PUT /api/site-maps/{map_id} endpoint working correctly. Successfully updates name, annotations, and maintains updated_at timestamp."
----------+
----------+  - task: "Site Maps API - Set current map version"
----------+    implemented: true
----------+    working: true
----------+    file: "/app/backend/server.py"
----------+    stuck_count: 0
----------+    priority: "high"
----------+    needs_retesting: false
----------+    status_history:
----------+      - working: true
----------+        agent: "testing"
----------+        comment: "✅ POST /api/site-maps/{map_id}/set-current endpoint working correctly. Properly manages current flag across all versions."
----------+
----------+  - task: "Site Maps API - Delete site map"
----------+    implemented: true
----------+    working: true
----------+    file: "/app/backend/server.py"
----------+    stuck_count: 0
----------+    priority: "high"
----------+    needs_retesting: false
----------+    status_history:
----------+      - working: true
----------+        agent: "testing"
----------+        comment: "✅ DELETE /api/site-maps/{map_id} endpoint working correctly. Successfully deletes site maps and returns proper confirmation."
----------+
----------+  - task: "Site Maps API - Error handling for invalid ObjectIds"
----------+    implemented: true
----------+    working: false
----------+    file: "/app/backend/server.py"
----------+    stuck_count: 1
----------+    priority: "low"
----------+    needs_retesting: false
----------+    status_history:
----------+      - working: false
----------+        agent: "testing"
----------+        comment: "Minor: Invalid ObjectId validation returns 500 errors instead of 404. Affects GET, PUT, POST set-current, and DELETE endpoints when non-existent IDs are provided. Core functionality works perfectly."
----------+
----------+frontend:
----------+  - task: "Site Maps Frontend Integration"
----------+    implemented: false
----------+    working: "NA"
----------+    file: "N/A"
----------+    stuck_count: 0
----------+    priority: "medium"
----------+    needs_retesting: false
----------+    status_history:
----------+      - working: "NA"
----------+        agent: "testing"
----------+        comment: "Frontend integration not tested as per system limitations. Backend APIs are ready for frontend integration."
----------+
----------+metadata:
----------+  created_by: "testing_agent"
----------+  version: "1.0"
----------+  test_sequence: 1
----------+  run_ui: false
----------+
----------+test_plan:
----------+  current_focus:
----------+    - "Site Maps API - Create site map with annotations"
----------+    - "Site Maps API - Get site maps by site"
----------+    - "Site Maps API - Get specific site map"
----------+    - "Site Maps API - Update site map"
----------+    - "Site Maps API - Set current map version"
----------+    - "Site Maps API - Delete site map"
----------+  stuck_tasks:
----------+    - "Site Maps API - Error handling for invalid ObjectIds"
----------+  test_all: false
----------+  test_priority: "high_first"
----------+
----------+agent_communication:
----------+  - agent: "testing"
----------+    message: "Site Maps backend API testing completed successfully. 30/34 tests passed (88.2% success rate). All core functionality working correctly including CRUD operations, version management, and annotation handling. Only minor issue with ObjectId validation error handling."
----------\ No newline at end of file
---------diff --git a/test_result.md b/test_result.md
---------index 7e8a08c..121fd3b 100644
------------ a/test_result.md
---------+++ b/test_result.md
---------@@ -135,6 +135,128 @@ test_plan:
---------   test_all: false
---------   test_priority: "high_first"
--------- 
---------+  - task: "HR Module - Employee Management APIs"
---------+    implemented: true
---------+    working: false
---------+    file: "/app/backend/hr_routes.py"
---------+    stuck_count: 0
---------+    priority: "high"
---------+    needs_retesting: false
---------+    status_history:
---------+      - working: false
---------+        agent: "testing"
---------+        comment: "❌ POST endpoints failing due to async/sync mismatch and BSON ObjectId serialization issues. GET endpoints working (found employees). Core issue: HR routes use synchronous MongoDB operations but FastAPI expects async operations."
---------+
---------+  - task: "HR Module - Time & Attendance APIs"
---------+    implemented: true
---------+    working: false
---------+    file: "/app/backend/hr_routes.py"
---------+    stuck_count: 0
---------+    priority: "high"
---------+    needs_retesting: false
---------+    status_history:
---------+      - working: false
---------+        agent: "testing"
---------+        comment: "❌ Cannot test due to employee creation dependency. Same async/sync mismatch issue as Employee Management."
---------+
---------+  - task: "HR Module - PTO Management APIs"
---------+    implemented: true
---------+    working: false
---------+    file: "/app/backend/hr_routes.py"
---------+    stuck_count: 0
---------+    priority: "high"
---------+    needs_retesting: false
---------+    status_history:
---------+      - working: false
---------+        agent: "testing"
---------+        comment: "❌ Cannot test due to employee creation dependency. Same async/sync mismatch issue as Employee Management."
---------+
---------+  - task: "HR Module - Training & Certifications APIs"
---------+    implemented: true
---------+    working: true
---------+    file: "/app/backend/hr_routes.py"
---------+    stuck_count: 0
---------+    priority: "high"
---------+    needs_retesting: false
---------+    status_history:
---------+      - working: true
---------+        agent: "testing"
---------+        comment: "✅ GET endpoints working correctly (found 2 training programs). POST endpoints failing due to async/sync mismatch. Minor: Training creation fails but retrieval works."
---------+
---------+  - task: "HR Module - Performance Management APIs"
---------+    implemented: true
---------+    working: false
---------+    file: "/app/backend/hr_routes.py"
---------+    stuck_count: 0
---------+    priority: "high"
---------+    needs_retesting: false
---------+    status_history:
---------+      - working: false
---------+        agent: "testing"
---------+        comment: "❌ Cannot test due to employee creation dependency. Same async/sync mismatch issue as Employee Management."
---------+
---------+  - task: "HR Module - Payroll Settings APIs"
---------+    implemented: true
---------+    working: true
---------+    file: "/app/backend/hr_routes.py"
---------+    stuck_count: 0
---------+    priority: "high"
---------+    needs_retesting: false
---------+    status_history:
---------+      - working: true
---------+        agent: "testing"
---------+        comment: "✅ Both GET and PUT endpoints working correctly. Payroll settings can be retrieved and updated successfully."
---------+
---------+  - task: "Integration Hub - Integration Management APIs"
---------+    implemented: true
---------+    working: true
---------+    file: "/app/backend/integration_routes.py"
---------+    stuck_count: 0
---------+    priority: "high"
---------+    needs_retesting: false
---------+    status_history:
---------+      - working: true
---------+        agent: "testing"
---------+        comment: "✅ GET endpoints working correctly (found 1 integration). Minor: POST endpoints failing due to async/sync mismatch, but core functionality accessible."
---------+
---------+  - task: "Integration Hub - QuickBooks Integration APIs"
---------+    implemented: true
---------+    working: true
---------+    file: "/app/backend/integration_routes.py"
---------+    stuck_count: 0
---------+    priority: "high"
---------+    needs_retesting: false
---------+    status_history:
---------+      - working: true
---------+        agent: "testing"
---------+        comment: "✅ All mock endpoints working correctly. Payroll sync and time tracking sync both return proper mock responses."
---------+
---------+  - task: "Integration Hub - Microsoft 365 Integration APIs"
---------+    implemented: true
---------+    working: true
---------+    file: "/app/backend/integration_routes.py"
---------+    stuck_count: 0
---------+    priority: "high"
---------+    needs_retesting: false
---------+    status_history:
---------+      - working: true
---------+        agent: "testing"
---------+        comment: "✅ All mock endpoints working correctly. SSO setup, Teams, Outlook, OneDrive, and Power BI sync all return proper mock responses."
---------+
---------+  - task: "Integration Hub - Sync Logs APIs"
---------+    implemented: true
---------+    working: false
---------+    file: "/app/backend/integration_routes.py"
---------+    stuck_count: 0
---------+    priority: "medium"
---------+    needs_retesting: false
---------+    status_history:
---------+      - working: false
---------+        agent: "testing"
---------+        comment: "❌ GET sync logs endpoint failing. Likely due to async/sync mismatch or ObjectId serialization issue."
---------+
--------- agent_communication:
---------   - agent: "testing"
----------    message: "Site Maps backend API testing completed successfully. 30/34 tests passed (88.2% success rate). All core functionality working correctly including CRUD operations, version management, and annotation handling. Only minor issue with ObjectId validation error handling."
---------\ No newline at end of file
---------+    message: "Site Maps backend API testing completed successfully. 30/34 tests passed (88.2% success rate). All core functionality working correctly including CRUD operations, version management, and annotation handling. Only minor issue with ObjectId validation error handling."
---------+  - agent: "testing"
---------+    message: "HR Module and Integration Hub backend API testing completed. 13/20 tests passed (65% success rate). Integration Hub working well with all mock endpoints functional. HR Module has critical async/sync mismatch issue - routes use synchronous MongoDB operations but FastAPI expects async operations, causing BSON ObjectId serialization errors in POST endpoints. GET endpoints mostly working. Requires architectural fix to convert HR routes to async operations."
---------\ No newline at end of file
------diff --git a/web-admin/components/SiteMapAnnotationOptimized.tsx b/web-admin/components/SiteMapAnnotationOptimized.tsx
------index 749aac0..ee2fe8e 100644
--------- a/web-admin/components/SiteMapAnnotationOptimized.tsx
------+++ b/web-admin/components/SiteMapAnnotationOptimized.tsx
------@@ -1265,6 +1265,7 @@ export default function SiteMapAnnotationOptimized({
------               </div>
------             </div>
------           </div>
------+          </div>
------         </div>
------       </div>
------     </div>
-----diff --git a/web-admin/components/HybridNavigationTopBar.tsx b/web-admin/components/HybridNavigationTopBar.tsx
-----index 040e3b7..17d1689 100644
-------- a/web-admin/components/HybridNavigationTopBar.tsx
-----+++ b/web-admin/components/HybridNavigationTopBar.tsx
-----@@ -32,24 +32,101 @@ export default function HybridNavigationTopBar({ children }: { children: React.R
-----   const [expandedMenu, setExpandedMenu] = useState<string | null>(null);
----- 
-----   const menuItems: MenuItem[] = [
-----+    // Core Operations
-----     { label: 'Dashboard', icon: LayoutDashboard, href: '/' },
------    { label: 'Customers', icon: Users, href: '/customers' },
------    { label: 'Estimates', icon: FileText, href: '/estimates' },
------    { label: 'Projects', icon: FolderOpen, href: '/projects' },
------    { label: 'Invoices', icon: DollarSign, href: '/invoices' },
-----+    {
-----+      label: 'Dispatch',
-----+      icon: MapPin,
-----+      submenu: [
-----+        { label: 'Dispatch Dashboard', href: '/dispatch/dashboard', icon: LayoutDashboard },
-----+        { label: 'All Dispatches', href: '/dispatch', icon: MapPin },
-----+        { label: 'Create Dispatch', href: '/dispatch/create', icon: FileText },
-----+      ],
-----+    },
-----     {
-----       label: 'Sites',
-----       icon: MapPin,
-----       submenu: [
-----         { label: 'All Sites', href: '/sites', icon: MapPin },
-----+        { label: 'Site Detail', href: '/sites/[id]', icon: FileText },
-----         { label: 'Site Maps', href: '/sites/maps', icon: MapPin },
-----+        { label: 'Create Site', href: '/sites/create', icon: FileText },
-----+      ],
-----+    },
-----+    
-----+    // Business Management
-----+    { label: 'Customers', icon: Users, href: '/customers' },
-----+    { label: 'Estimates', icon: FileText, href: '/estimates' },
-----+    { label: 'Projects', icon: FolderOpen, href: '/projects' },
-----+    { label: 'Invoices', icon: DollarSign, href: '/invoices' },
-----+    {
-----+      label: 'Contracts',
-----+      icon: FileText,
-----+      submenu: [
-----+        { label: 'All Contracts', href: '/contracts', icon: FileText },
-----+        { label: 'Create Contract', href: '/contracts/create', icon: FileText },
-----+      ],
-----+    },
-----+    
-----+    // Finance
-----+    {
-----+      label: 'Finance',
-----+      icon: DollarSign,
-----+      submenu: [
-----+        { label: 'Finance Dashboard', href: '/finance/dashboard', icon: LayoutDashboard },
-----+        { label: 'Payments', href: '/finance/payments', icon: DollarSign },
-----+        { label: 'Expenses', href: '/finance/expenses', icon: DollarSign },
-----+        { label: 'Reports', href: '/finance/reports', icon: FileText },
-----+      ],
-----+    },
-----+    
-----+    // Equipment & Assets
-----+    {
-----+      label: 'Equipment',
-----+      icon: Settings,
-----+      submenu: [
-----+        { label: 'Equipment Dashboard', href: '/equipment/dashboard', icon: LayoutDashboard },
-----+        { label: 'All Equipment', href: '/equipment', icon: Settings },
-----+        { label: 'Inspections', href: '/equipment/inspections', icon: FileText },
-----+        { label: 'Maintenance', href: '/equipment/maintenance', icon: Settings },
-----+        { label: 'Create Equipment', href: '/equipment/create', icon: FileText },
-----+      ],
-----+    },
-----+    {
-----+      label: 'Assets',
-----+      icon: Settings,
-----+      submenu: [
-----+        { label: 'Vehicles', href: '/assets/vehicles', icon: MapPin },
-----+        { label: 'Trailers', href: '/assets/trailers', icon: Settings },
-----+        { label: 'Tools', href: '/assets/tools', icon: Settings },
-----+      ],
-----+    },
-----+    {
-----+      label: 'Inventory',
-----+      icon: FolderOpen,
-----+      submenu: [
-----+        { label: 'Inventory List', href: '/inventory', icon: FolderOpen },
-----+        { label: 'Consumables', href: '/consumables', icon: FolderOpen },
-----+        { label: 'Analytics', href: '/consumables/analytics', icon: LayoutDashboard },
-----+      ],
-----+    },
-----+    
-----+    // Team & HR
-----+    {
-----+      label: 'Team',
-----+      icon: Users,
-----+      submenu: [
-----+        { label: 'Team Members', href: '/team', icon: Users },
-----+        { label: 'Crew', href: '/crew', icon: Users },
-----+        { label: 'Shifts', href: '/shifts', icon: FileText },
-----+        { label: 'Shift History', href: '/shifts/history', icon: FileText },
-----       ],
-----     },
-----     {
-----       label: 'HR Module',
-----       icon: Briefcase,
-----       submenu: [
------        { label: 'Overview', href: '/hr', icon: Briefcase },
-----+        { label: 'HR Dashboard', href: '/hr', icon: Briefcase },
-----         { label: 'Employees', href: '/hr/employees', icon: Users },
-----         { label: 'Time & Attendance', href: '/hr/time-attendance', icon: LayoutDashboard },
-----         { label: 'PTO', href: '/hr/pto', icon: FileText },
-----@@ -58,17 +135,122 @@ export default function HybridNavigationTopBar({ children }: { children: React.R
-----         { label: 'Payroll', href: '/hr/payroll', icon: DollarSign },
-----       ],
-----     },
-----+    
-----+    // Operations & Safety
-----+    {
-----+      label: 'Safety',
-----+      icon: UserCog,
-----+      submenu: [
-----+        { label: 'Safety Dashboard', href: '/safety/dashboard', icon: LayoutDashboard },
-----+        { label: 'Incidents', href: '/safety/incidents', icon: FileText },
-----+        { label: 'Inspections', href: '/safety/inspections', icon: FileText },
-----+        { label: 'Training', href: '/safety/training', icon: FolderOpen },
-----+        { label: 'Hazards', href: '/safety/hazards', icon: FileText },
-----+        { label: 'Meetings', href: '/safety/meetings', icon: Users },
-----+        { label: 'Policies', href: '/safety/policies', icon: FileText },
-----+        { label: 'PPE', href: '/safety/ppe', icon: Settings },
-----+      ],
-----+    },
-----+    {
-----+      label: 'Routes',
-----+      icon: MapPin,
-----+      submenu: [
-----+        { label: 'All Routes', href: '/routes', icon: MapPin },
-----+        { label: 'Optimize Routes', href: '/routes/optimize', icon: LayoutDashboard },
-----+      ],
-----+    },
-----+    
-----+    // Communication
-----+    {
-----+      label: 'Communication',
-----+      icon: Users,
-----+      submenu: [
-----+        { label: 'Communication Dashboard', href: '/communication/dashboard', icon: LayoutDashboard },
-----+        { label: 'Messages', href: '/messages', icon: Users },
-----+        { label: 'Gmail', href: '/gmail', icon: Users },
-----+        { label: 'Feedback', href: '/feedback', icon: FileText },
-----+      ],
-----+    },
-----+    {
-----+      label: 'RingCentral',
-----+      icon: Users,
-----+      submenu: [
-----+        { label: 'RingCentral Hub', href: '/ringcentral', icon: Users },
-----+        { label: 'Active Calls', href: '/ringcentral/active-calls', icon: Users },
-----+        { label: 'Messaging', href: '/ringcentral/messaging', icon: Users },
-----+        { label: 'SMS', href: '/ringcentral/sms', icon: Users },
-----+        { label: 'Recordings', href: '/ringcentral/recordings', icon: FileText },
-----+        { label: 'Analytics', href: '/ringcentral/analytics', icon: LayoutDashboard },
-----+        { label: 'Contacts', href: '/ringcentral/contacts', icon: Users },
-----+      ],
-----+    },
-----+    
-----+    // Tools & Automation
-----+    {
-----+      label: 'Forms',
-----+      icon: FileText,
-----+      submenu: [
-----+        { label: 'All Forms', href: '/forms', icon: FileText },
-----+        { label: 'Form Builder', href: '/forms/builder', icon: FileText },
-----+        { label: 'Responses', href: '/forms/responses', icon: FileText },
-----+      ],
-----+    },
-----+    {
-----+      label: 'Automation',
-----+      icon: LayoutDashboard,
-----+      submenu: [
-----+        { label: 'Workflows', href: '/automation/workflows', icon: LayoutDashboard },
-----+        { label: 'Analytics', href: '/automation/analytics', icon: LayoutDashboard },
-----+        { label: 'Create Workflow', href: '/automation/workflows/create', icon: FileText },
-----+      ],
-----+    },
-----+    { label: 'Weather', icon: MapPin, href: '/weather' },
-----+    { label: 'Tracking', icon: MapPin, href: '/tracking' },
-----+    { label: 'Reports', icon: FileText, href: '/reports' },
-----+    { label: 'Analytics', icon: LayoutDashboard, href: '/analytics' },
-----+    { label: 'Tasks', icon: FileText, href: '/tasks' },
-----+    
-----+    // Admin
-----+    {
-----+      label: 'Access',
-----+      icon: UserCog,
-----+      submenu: [
-----+        { label: 'Access Dashboard', href: '/access', icon: LayoutDashboard },
-----+        { label: 'Master Users', href: '/access/master', icon: Users },
-----+        { label: 'Admins', href: '/access/admins', icon: Users },
-----+        { label: 'Crew', href: '/access/crew', icon: Users },
-----+        { label: 'Customers', href: '/access/customers', icon: Users },
-----+        { label: 'Subcontractors', href: '/access/subcontractors', icon: Users },
-----+        { label: 'Vendors', href: '/access/vendors', icon: Users },
-----+      ],
-----+    },
-----     { label: 'Integrations', icon: Link2, href: '/integrations' },
------    { label: 'Access', icon: UserCog, href: '/access' },
-----     {
-----       label: 'Settings',
-----       icon: Settings,
-----       submenu: [
-----+        { label: 'Settings Hub', href: '/settings', icon: Settings },
-----         { label: 'Account', href: '/settings/account', icon: Users },
-----+        { label: 'Profile', href: '/settings/profile', icon: Users },
-----+        { label: 'Company', href: '/settings/company', icon: Settings },
-----         { label: 'Security', href: '/settings/security', icon: Settings },
-----         { label: 'Branding', href: '/settings/branding', icon: Settings },
------        { label: 'Roles & Permissions', href: '/settings/roles', icon: UserCog },
-----+        { label: 'Service Areas', href: '/settings/service-areas', icon: MapPin },
-----+        { label: 'Roles & Permissions', href: '/settings/roles-permissions', icon: UserCog },
-----+        { label: 'Permissions Matrix', href: '/settings/permissions-matrix', icon: UserCog },
-----+        { label: 'Billing', href: '/settings/billing', icon: DollarSign },
-----+        { label: 'Notifications', href: '/settings/notifications', icon: Settings },
-----+        { label: 'Email Config', href: '/settings/email-config', icon: Settings },
-----+        { label: 'Email Templates', href: '/settings/email-templates', icon: FileText },
-----+        { label: 'SMS Config', href: '/settings/sms-config', icon: Settings },
-----         { label: 'API', href: '/settings/api', icon: Link2 },
-----+        { label: 'Webhooks', href: '/settings/webhooks', icon: Link2 },
-----+        { label: 'Google', href: '/settings/google', icon: Link2 },
-----+        { label: 'QuickBooks', href: '/settings/quickbooks', icon: Link2 },
-----+        { label: 'RingCentral', href: '/settings/ringcentral', icon: Link2 },
-----+        { label: 'Preferences', href: '/settings/preferences', icon: Settings },
-----+        { label: 'Equipment Forms', href: '/settings/equipment-forms', icon: FileText },
-----+        { label: 'Support', href: '/settings/support', icon: Settings },
-----       ],
-----     },
-----   ];
----diff --git a/web-admin/app/hr/employees/page.tsx b/web-admin/app/hr/employees/page.tsx
----index a60a668..6453767 100644
------- a/web-admin/app/hr/employees/page.tsx
----+++ b/web-admin/app/hr/employees/page.tsx
----@@ -547,7 +547,6 @@ export default function EmployeesPage() {
----           </div>
----         </div>
----       )}
-----      </div>
-----    </HybridNavigationTopBar>
----+    </div>
----   );
---- }
---diff --git a/web-admin/app/crm/dashboard/page.tsx b/web-admin/app/crm/dashboard/page.tsx
---index 809df2f..18cc1ca 100644
------ a/web-admin/app/crm/dashboard/page.tsx
---+++ b/web-admin/app/crm/dashboard/page.tsx
---@@ -114,15 +114,17 @@ export default function CRMDashboardPage() {
---   ];
--- 
---   return (
----    <div className="p-4 space-y-6">
----        <CompactHeader
----          title="CRM Dashboard"
----          icon={LayoutDashboard}
----          badges={[
----            { label: `${stats.customers} Customers`, color: 'blue' },
----            { label: `${stats.projects} Projects`, color: 'green' },
----          ]}
----        />
---+    <div className="min-h-screen bg-gray-50">
---+      <PageHeader
---+        title="CRM Dashboard"
---+        subtitle="Manage customers, leads, estimates, projects, and revenue"
---+        breadcrumbs={[
---+          { label: "Home", href: "/" },
---+          { label: "CRM Dashboard" },
---+        ]}
---+      />
---+      
---+      <div className="p-6 space-y-6">
--- 
---         {/* Stats Grid */}
---         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
---@@ -195,5 +197,6 @@ export default function CRMDashboardPage() {
---           </div>
---         </div>
---       </div>
---+    </div>
---   );
--- }
--diff --git a/web-admin/app/customers/page.tsx b/web-admin/app/customers/page.tsx
--index dfbe749..3438d45 100644
----- a/web-admin/app/customers/page.tsx
--+++ b/web-admin/app/customers/page.tsx
--@@ -43,6 +43,17 @@ export default function CustomersPage() {
--   const [filterActive, setFilterActive] = useState('all');
--   const [filterType, setFilterType] = useState('all'); // 'all', 'individual', 'company'
--   const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid'); // View toggle - default to grid
--+  const [showColumnSelector, setShowColumnSelector] = useState(false);
--+  const [visibleColumns, setVisibleColumns] = useState({
--+    name: true,
--+    email: true,
--+    phone: true,
--+    address: true,
--+    type: true,
--+    status: true,
--+    created: true,
--+    actions: true,
--+  });
-- 
--   useEffect(() => {
--     loadCustomers();
-diff --git a/web-admin/app/customers/page.tsx b/web-admin/app/customers/page.tsx
-index a64e659..83c38a1 100644
---- a/web-admin/app/customers/page.tsx
-+++ b/web-admin/app/customers/page.tsx
-@@ -474,30 +474,6 @@ export default function CustomersPage() {
-                         <span className="line-clamp-1">{customer.address}</span>
-                       </div>
-                     </div>
--
--                    {/* Quick Actions */}
--                    <div className="mt-3 pt-3 border-t border-gray-100 flex gap-2">
--                      <button
--                        onClick={(e) => {
--                          e.stopPropagation();
--                          router.push(`/customers/${customerId}`);
--                        }}
--                        className="flex-1 px-3 py-1.5 bg-[#3f72af] hover:bg-[#2c5282] text-white text-xs rounded-lg transition-colors flex items-center justify-center gap-1"
--                      >
--                        <Eye className="w-3 h-3" />
--                        View
--                      </button>
--                      <button
--                        onClick={(e) => {
--                          e.stopPropagation();
--                          router.push(`/customers/${customerId}/edit`);
--                        }}
--                        className="flex-1 px-3 py-1.5 bg-gray-100 hover:bg-gray-100 transition-all text-gray-700 text-xs rounded-lg transition-colors flex items-center justify-center gap-1"
--                      >
--                        <Edit className="w-3 h-3" />
--                        Edit
--                      </button>
--                    </div>
-                   </div>
-                 </div>
-               );
diff --git a/web-admin/app/customers/create/page.tsx b/web-admin/app/customers/create/page.tsx
index 8588dfa..448655f 100644
--- a/web-admin/app/customers/create/page.tsx
+++ b/web-admin/app/customers/create/page.tsx
@@ -112,16 +112,27 @@ export default function CustomerFormPage() {
   }, [customerId]);
 
   const initGooglePlaces = () => {
-    if (typeof window === 'undefined' || !window.google) {
-      // Load Google Places API
-      const script = document.createElement('script');
-      script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}&libraries=places`;
-      script.async = true;
-      script.onload = () => setupAutocomplete();
-      document.head.appendChild(script);
-    } else {
+    if (typeof window === 'undefined') return;
+    
+    // Check if Google Maps is already loaded
+    if (window.google && window.google.maps) {
       setupAutocomplete();
+      return;
+    }
+    
+    // Check if script is already being loaded
+    const existingScript = document.querySelector('script[src*="maps.googleapis.com"]');
+    if (existingScript) {
+      existingScript.addEventListener('load', () => setupAutocomplete());
+      return;
     }
+    
+    // Load Google Places API
+    const script = document.createElement('script');
+    script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}&libraries=places`;
+    script.async = true;
+    script.onload = () => setupAutocomplete();
+    document.head.appendChild(script);
   };
 
   const setupAutocomplete = () => {
