'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';

interface CallInfo {
  id: string;
  session_id: string;
  from_number: string;
  from_name?: string;
  to_number: string;
  direction: string;
  timestamp: string;
  status: string;
  customer_id?: string;
  customer_name?: string;
  customer_email?: string;
}

interface CallPopupProps {
  apiUrl: string;
}

export default function CallPopup({ apiUrl }: CallPopupProps) {
  const [activeCalls, setActiveCalls] = useState<CallInfo[]>([]);
  const [dismissedCalls, setDismissedCalls] = useState<Set<string>>(new Set());
  const router = useRouter();

  useEffect(() => {
    // Connect to SSE endpoint for real-time call notifications
    const eventSource = new EventSource(`${apiUrl}/api/ringcentral/call-stream`);

    eventSource.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);

        if (data.type === 'call') {
          const call = data.call;
          
          // Only show ringing calls that haven't been dismissed
          if (call.status === 'ringing' && !dismissedCalls.has(call.session_id)) {
            setActiveCalls((prev) => {
              // Check if call already exists
              const exists = prev.some((c) => c.session_id === call.session_id);
              if (exists) {
                return prev;
              }
              // Add new call
              return [...prev, call];
            });

            // Auto-dismiss after 30 seconds
            setTimeout(() => {
              handleDismiss(call.session_id);
            }, 30000);
          }
        } else if (data.type === 'connected') {
          console.log('Call stream connected');
        } else if (data.type === 'heartbeat') {
          // Heartbeat received
        } else if (data.type === 'error') {
          console.error('Call stream error:', data.message);
        }
      } catch (error) {
        console.error('Error parsing SSE message:', error);
      }
    };

    eventSource.onerror = (error) => {
      console.error('SSE connection error:', error);
      eventSource.close();

      // Attempt to reconnect after 5 seconds
      setTimeout(() => {
        window.location.reload();
      }, 5000);
    };

    // Cleanup on unmount
    return () => {
      eventSource.close();
    };
  }, [apiUrl, dismissedCalls]);

  const handleDismiss = (sessionId: string) => {
    setDismissedCalls((prev) => new Set(prev).add(sessionId));
    setActiveCalls((prev) => prev.filter((call) => call.session_id !== sessionId));
  };

  const handleViewCustomer = (customerId: string) => {
    router.push(`/customers?id=${customerId}`);
    // Dismiss after viewing
    const call = activeCalls.find((c) => c.customer_id === customerId);
    if (call) {
      handleDismiss(call.session_id);
    }
  };

  // Don't render if no active calls
  if (activeCalls.length === 0) {
    return null;
  }

  return (
    <div className="fixed top-20 right-6 z-50 space-y-3">
      {activeCalls.map((call) => (
        <div
          key={call.session_id}
          className="bg-white border-2 border-blue-500 rounded-lg shadow-2xl p-4 min-w-[320px] max-w-[400px] animate-bounce-subtle"
          style={{
            animation: 'slideInRight 0.3s ease-out',
          }}
        >
          {/* Header */}
          <div className="flex items-start justify-between mb-3">
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
              <h3 className="font-semibold text-gray-900">Incoming Call</h3>
            </div>
            <button
              onClick={() => handleDismiss(call.session_id)}
              className="text-gray-400 hover:text-gray-600 transition-colors"
              aria-label="Dismiss"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          {/* Call Info */}
          <div className="space-y-2 mb-4">
            <div className="flex items-center space-x-2">
              <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
              </svg>
              <span className="text-lg font-medium text-gray-900">
                {call.from_name || call.from_number || 'Unknown'}
              </span>
            </div>

            {call.from_name && call.from_number && (
              <div className="text-sm text-gray-600 ml-7">{call.from_number}</div>
            )}

            {call.customer_name && (
              <div className="ml-7 mt-2 p-2 bg-blue-50 rounded border border-blue-200">
                <div className="flex items-center space-x-2">
                  <svg className="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                  <span className="font-medium text-blue-900">{call.customer_name}</span>
                </div>
                {call.customer_email && (
                  <div className="text-xs text-blue-700 mt-1">{call.customer_email}</div>
                )}
              </div>
            )}

            {!call.customer_name && (
              <div className="ml-7 mt-2 p-2 bg-gray-50 rounded border border-gray-200">
                <span className="text-sm text-gray-600">New caller - not in database</span>
              </div>
            )}
          </div>

          {/* Actions */}
          <div className="flex space-x-2">
            {call.customer_id && (
              <button
                onClick={() => handleViewCustomer(call.customer_id!)}
                className="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors"
              >
                View Customer
              </button>
            )}
            <button
              onClick={() => handleDismiss(call.session_id)}
              className="flex-1 bg-gray-200 hover:bg-gray-300 text-gray-700 px-4 py-2 rounded-lg text-sm font-medium transition-colors"
            >
              Dismiss
            </button>
          </div>

          {/* Timestamp */}
          <div className="mt-3 text-xs text-gray-500 text-center">
            {new Date(call.timestamp).toLocaleTimeString()}
          </div>
        </div>
      ))}

      <style jsx>{`
        @keyframes slideInRight {
          from {
            transform: translateX(400px);
            opacity: 0;
          }
          to {
            transform: translateX(0);
            opacity: 1;
          }
        }
      `}</style>
    </div>
  );
}
